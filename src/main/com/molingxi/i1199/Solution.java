package main.com.molingxi.i1199;

import org.apache.commons.lang3.time.StopWatch;

import java.util.*;

class Solution {


    public static void main(String[] args) {



//        System.out.println(new Solution().minBuildTime(
//                new int[] {1}, 1));
//        System.out.println(new Solution().minBuildTime(
//                new int[] {1,2}, 5));
//        System.out.println(new Solution().minBuildTime(
//                new int[] {1,2,3}, 1));

        int[] arr = new int[] {73270,59698,48565,41321,8772,54370,39670,12264,45147,69179,68696,20087,82460,67637,32982,40114,82219,59434,26220,81748,98923,17584,37259,55050,83756,65879,22557,78181,21934,73797,15901,83138,85607,62775,48233,83086,86223,29764,14378,53712,69841,66819,48923,21771,7699,88944,29364,35441,26691,98764,43519,32591,78002,14299,68120,99122,48258,67425,17368,3683,93802,21860,58602,50674,6079,58457,82619,30973,32927,99189,46748,93590,72179,37385,9846,21820,16229,75466,1710,71277,47804,49746,39552,2017,11272,46897,68712,54214,19017,58852,55927,51875,62048,43829,43355,67562,99991,13460,63118,93756,91771,92318,23565,80901,92154,42557,94467,81268,53198,10397,95235,17505,93052,24679,30152,60080,83380,5458,86048,77201,22479,83239,67401,89081,65489,80007,4169,2173,86161,37728,48250,12933,60310,66342,66833,63462,73655,34478,29505,58780,55877,16634,92130,36852,60537,33029,76251,69349,45039,78892,26831,90668,4910,42253,27347,76375,19739,78439,11535,10900,21557,85928,19134,77429,66586,60367,98125,23676,61141,63305,65820,21318,8272,49409,23300,50664,66259,86567,72576,44645,32306,4480,19011,30860,93570,51312,92867,32116,8551,81004,27470,16618,76795,84135,33719,38731,16540,84798,42947,90745,30458,55380,95933,54055,64635,80488,87505,79032,23662,28312,9764,14886,28145,13905,10848,68710,16778,74329,28767,48121,94464,52114,95714,45163,27594,86027,83008,78489,52682,61158,11075,5245,65278,42012,36275,81426,95137,62498,33564,1767,16459,11100,21199,95836,97348,33265,58086,54269,97080,16732,76892,28791,75886,4345,52137,8033,6847,85422,39369,79640,45738,73543,25089,32242,75619,60745,91786,87563,31627,8823,36702,58941,66044,85531,83942,76404,14614,30496,24271,61540,59977,63014,66459,36423,64438,26546,86635,58896,20606,68686,85665,48163,57792,85286,97099,73798,60434,38920,2432,13797,76032,21432,72772,57374,78123,38556,89540,99153,32391,77785,25722,3284,62894,38020,5061,99572,51716,30443,40113,66045,546,29600,40161,52228,45512,10796,12695,98660,89410,1870,75143,79974,67211,25066,46733,42216,84,5016,27985,59918,6723,25387,93726,43030,60030,86863,51591,9552,64407,76120,7733,82175,28078,54146,84149,53650,98209,53562,57921,63254,27000,21511,9195,72010,45441,47481,67574,54689,99230,61963,73102,97527,32034,1967,11513,28235,47302,26620,47134,64404,46771,55519,40530,84256,16246,28882,13827,73799,16004,20995,45229,70972,89584,37006,46621,66983,28045,68465,59920,39085,76489,33915,75535,25755,8019,98296,39445,94353,17483,90890,58700,461,31330,77403,67539,2378,46461,93458,96287,59413,62129,80549,20207,40195,78790,41399,82708,27120,64942,8001,24499,72475,35527,37923,26443,28094,42701,8447,31905,43785,61080,2040,12606,72228,96014,28018,7898,66114,55503,57152,88271,20761,53659,31926,87976,57028,77717,14516,71629,10084,57942,67750,98259,40292,46290,69656,66831,57070,17782,28449,18423,79212,94665,38434,49722,88688,28600,51777,90779,34197,74095,53809,23509,58029,24509,71999,46880,90453,60987,78049,93610,76006,59875,93732,39998,529,37253,97190,71118,19228,3842,96070,14741,46104,37310,27888,15708,89085,24454,39346,94360,74480,4048,5317,81366,64918,45144,68140,10076,10279,75169,92356,80672,27773,52995,66110,33148,4570,36174,70676,79783,3775,56653,77205,10647,13613,91447,78421,37191,18993,61531,47466,17487,36150,18752,92105,68850,19194,17822,53398,44791,31827,12615,71654,75832,91612,27262,62277,96757,91685,59097,59762,86953,52981,60626,81507,32920,33904,54467,84907,59957,45514,33186,17475,69689,58310,37919,1517,81423,55532,71311,3304,95230,291,92012,69736,14062,93274,57391,18489,68226,41438,13754,25973,56138,84643,78599,6431,85759,41027,55604,31467,67860,29825,1465,81544,80569,70469,14006,49811,91538,70356,76264,62991,71914,85398,83354,36043,79925,52399,93512,5247,94925,36954,6675,26730,511,63481,61173,63783,82709,47251,84076,10687,23539,26988,32838,68849,32621,11264,82006,62781,71456,69712,19847,28807,11447,15721,81832,20132,65768,21123,28208,95636,96258,82569,91883,64382,17110,68938,32982,11889,65085,54036,74743,38071,54793,36426,33836,81588,68351,61911,4592,11400,39260,43288,49132,6407,53377,31963,2802,83955,24933,26382,51293,83937,45456,12749,39038,23185,85902,86309,9915,22558,27489,76740,88411,6702,82428,3859,37971,3143,92474,89567,4910,72638,74956,12966,31135,49780,13955,33007,86789,80286,29220,32903,30112,11430,76150,11363,33022,19970,98682,60244,39491,46023,2940,24173,59049,70850,3581,79995,28849,11953,56409,547,76252,59116,5809,4478,43158,87758,52643,69254,74855,67258,20138,71655,13540,87150,20064,20518,74008,7895,74941,12814,67867,30627,98112,85977,95548,99009,51468,60510,8809,87776,32023,88345,58789,84393,17067,72228,81512,72160,70936,42485,93463,71247,77223,15312,65247,71590,80163,56429,56574,21071,2095,19236,46244,36304,56678,30367,76359,31249,93467,51517,38205,31260,40234,15994,64133,72007,14820,67735,58305,66276,8702,22723,94346,41647,4639,91537,88285,33943,30691,20498,72860,72092,19767,22379,52971,93228,55274,9494,7769,89189,52547,62156,60833,11013,46733,6785,41518,8780,87489,13093,15107,7131,41566,88234,55730,72019,44385,43724,11894,80260,7858,56226,11086,14538,48880,69816,56325,6648,91472,54007,88817,85713,72693,77110,27003,61554,6464,60700,9972,5502,92933,2581,42188,10323,41689,36455,43627,88022,29750,50894,43273,77237,49351,87127,53608,14940,9520,89484,40297,57743,90702,99351,25074,26718,83446,99745,53924,46920,50062,16131,16792,11780,72392,931};


        StopWatch sw = new StopWatch();


        //arr = new int[] {1,1,1,1};
        arr = new int[]{31752,36303,66033,38735,60295,97510,8745,97660,27410,71554,28568,61535,96160,38487,30895,32108,97661,55987,12287,29154,83483,123,44196,9617,45948,39116,96600,28058,587,79769,28440,65138,9883,68794,51101,97831,51464,96372,69801,73031,371,95211,58445,88674,92024,91649,96206,97195,27079,29593,50288,28550,60169,54108,69681,54271,28812,35367,40239,76431,18321,47129,50024,38247,74590,38302,32532,9308,57845,13038,64187,54414,8161,62087,24983,56524,33373,15945,51718,2231,10360,33372,21407,90442,95384,17120,64101,34823,6742,41374,46217,51509,79751,10360,27908,50328,11298,45041,5887,86894,69509,5367,10992,18,76845,15376,87626,53990,28395,63646,93965,29404,87130,88596,64175,3930,32692,48731,4456,46921,54101,14747,70811,25551,24948,67491,43021,24661,27769,26805,94610,85468,33139,34812,45614,28901,1126,7011,40824,99461,33330,76289,59787,30550,28158,99604,13358,15292,93244,97586,60226,69440,9162,23149,70878,54288,72005,747,3129,15012,26963,17539,31656,29551,85964,32040,81765,69778,26369,26741,13663,23055,14739,45898,17858,63244,98460,55972,35610,2528,77811,43749,88347,97726,36224,2092,72311,71948,89436,78436,56445,8318,36845,77796,2691,52999,6136,71531,54012,23988,8505,4485,64935,64733,45796,99982,14529,37419,92834,22131,70931,98969,10876,18909,86881,22,57690,43940,30938,17808,16732,68410,62202,45888,84601,57637,38517,33128,49371,36636,96623,29816,25462,49596,11922,50106,56935,26454,44893,95455,72986,5881,48524,90246,33242,33522,91756,46553,59781,87071,17740,74129,20330,81568,94661,60848,54861,19394,86551,46453,82029,51881,52424,42007,47150,8424,13074,19862,23198,95010,38451,26918,74579,27160,14443,26257,26922,83212,1970,75126,74897,80136,99003,40852,33019,34251,20876,88737,18008,85838,85810,3242,77096,5480,10116,77137,44748,31473,23876,13109,75935,58712,95157,27271,30118,140,3605,90858,43413,55895,16207,55065,40555,21951,95383,41643,55712,16945,44568,85424,87789,68951,1491,30699,67292,39252,20339,79584,28596,65550,39061,7926,12244,88221,70082,95542,87656,74027,60289,58029,15112,2296,82249,14944,99694,54311,24007,63067,36652,90938,78323,29114,2482,82510,93936,55969,82500,91864,34465,31612,45797,65517,22057,7663,24355,53002,72690,63765,30760,18780,91314,1325,62360,26332,30274,80534,14933,87257,80434,93952,99518,77469,22740,8503,85012,20171,96956,43311,3323,85261,71539,66302,4860,29201,48711,12627,57371,21580,65536,46747,11132,33816,56012,49504,45178,73592,38860,83331,38045,57315,13418,89106,70140,9598,92016,66092,36523,73027,31838,53742,16762,40227,8144,99736,43287,76425,23843,46731,15632,28376,17328,96671,57408,80716,65870,35753,16443,10261,24717,8094,14766,68193,84849,53037,33469,77554,54057,22908,44035,84390,74103,52365,83245,15780,12798,64482,16953,66085,30042,81575,79972,16913,99593,75869,10918,70083,31475,94708,60859,36858,257,3437,4394,21347,64936,31269,26606,98649,67264,13893,36772,21454,32311,18882,89734,29354,9066,87841,77107,97271,18797,34647,79239,37084,87720,81585,16806,83693,25725,75459,17029,34872,78774,34779,95473,97562,68625,88966,86459,9974,52848,79274,45837,63742,88470,54965,26241,38825,39924,47048,3338,30468,4031,367,52618,22358,65210,74945,66170,98727,74512,9211,83534,22185,86810,76714,61312,92614,23663,72953,94551,68889,87280,79738,76180,18026,93929,93063,66796,14606,86003,73288,74324,41140,40839,61115,94822,55755,53348,47256,41393,84577,86344,83759,69003,30464,54761,13896,62556,21371,99749,73182,14748,87154,24635,11084,55251,74606,58633,59685,65079,5993,54862,45406,64101,27386,34626,54536,49854,54254,7904,85979,68513,58637,23820,4562,81309,11169,37000,66719,86068,70785,96839,30174,46721,87181,21709,7115,72235,14317,52393,56075,73862,89878,96173,73014,80858,62259,25715,86590,53236,74465,33875,15604,28935,6003,60763,35411,65150,62800,56869,9802,56286,57847,5510,94894,28548,59685,86719,12380,21486,23314,74659,91895,93647,56985,60224,84478,75412,22229,29776,31768,5361,34148,1759,8894,39821,86790,71183,26402,56876,62279,74807,85231,45114,37921,54593,35947,9001,20606,14294,31125,4959,31075,91287,18302,46713,90310,48258,83528,36258,81399,68949,9753,13580,19510,88605,78675,44699,3792,27890,49266,13111,69660,74811,13528,69256,8329,42852,51928,10011,83584,15582,92578,75342,18088,66401,68786,5162,46226,27891,8989,96051,54828,6620,41540,1535,76052,43976,21555,55540,59565,48779,97913,55648,86361,78987,93025,8749,35548,34798,98505,82735,90477,99812,37185,99986,44180,95590,53304,69826,70124,55764,47307,34551,15740,52209,74823,28769,43857,98956,16618,46423,97311,59103,93673,31733,71820,5637,33775,35924,51215,23924,18905,92389,17372,61479,90616,34390,57592,87703,66345,76195,39449,27629,55316,41480,15504,35285,93281,93757,44068,99877,21184,53523,80166,96962,18890,20223,84975,58959,89740,74903,36439,22528,14786,76810,69546,87323,43842,62445,7054,6622,75999,5405,233,71776,8166,52171,82237,17385,95609,46654,23525,54017,52744,26545,3949,89584,22340,73496,19232,36700,76509,85571,90798,37632,29839,34923,14444,81507,64095,70658,21636,15162,65678,48461,28780,76275,37395,82000,26869,33390,86088,95797,81408,8833,39936,43341,49071,19169,34001,72298,47113,74968,81548,95277,4343,30559,79306,59091,37363,7042,48728,4298,81601,76375,20989,55178,53278,88366,37207,76500,35546,70963,51014,14229,29684,81030,13883,84941,95157,86930,73157,82320,20539,29395,13141,8816,92472,87905,75487,68304,25106,5962,95415,4151,50960,13734,84937,6670,89706,5784,51384,58880,7373,31927,46573,69104,86537,22576,79219,54403,30470,97694,79160,53776,4870,85350,60961,74734,18822,10273,59307,31228,1694,51586,97465,81368,11721,34714,68113,60225,53698,80313,12030,81273,73769,39347,7298,84874,70231,13146,92970,87638,15054,98412,2777,11999,1827,12172,55848,34311,29825,42848,70588,95988,29841,98027,20085,20846,46792,86131,40108,17019,55242,2137,38295,40465,96995,74691,58062,55398,22687,62775,45149,49764,69949,4113,46392,7866,73209,14135,64211,13715,41178,28608,74752,60558,54108,31599,69884,26569,22944,75870,32245,92233,70080,85673,14600};
        System.out.println(arr.length);

        sw.start();
        System.out.println(new Solution().minBuildTime2(
                arr , 19));
        sw.split();

        System.out.println("time in : " + sw.getSplitTime());

        System.out.println(new Solution().minBuildTime(
                arr , 19));

        sw.split();
        System.out.println("time in : " + sw.getSplitTime());
    }


    private Map<Integer, Integer> cache = new HashMap<>() ;
    public  int minBuildTime(int[] blocks, int split) {

        Arrays.sort(blocks);
        return minInternal(blocks, blocks.length - 1,1,  split);
    }


    public  int minBuildTime3(int[] blocks, int split) {

        Arrays.sort(blocks);
        int[] previous = new int[blocks.length];
        int[] cur = new int[blocks.length];

        Arrays.sort(blocks);
        Arrays.fill(previous, blocks[0]);

        for (int i = 1;i < blocks.length;i++) {

            for (int j = 1;j <= blocks.length;j++) {
                int numOfSplit = j == 1 ? 1:0;

                int min = Integer.MAX_VALUE;
                while(numOfSplit < 10) {
                    int cur = Math.max()
                }
            }
        }

        return previous[0];
    }


    private  int minInternal(int[] blocks, int start, int numWorks, int split) {
        if (numWorks >= start + 1) {
            return blocks[start];
        } else {
            Integer key = start * 1000000 + numWorks;

            if (cache.containsKey(key) ) {
                return cache.get(key);
            }
            int min = Integer.MAX_VALUE;


            for (int i = 0; i < numWorks;i++) {
                min = Math.max(Math.min(
                        min,

                        minInternal(blocks, start - i, (numWorks - i) * 2, split ) + split
                ) , blocks[start]);
            }

            cache.put(key, min);
            return min;
        }
    }

    public  int minBuildTime2(int[] blocks, int split) {

        Arrays.sort(blocks);
        return minInternal2(blocks, blocks.length - 1,1,  split);
    }

    private  int minInternal2(int[] blocks, int start, int numWorks, int split) {
        if (numWorks >= start + 1) {
            return blocks[start];
        } else {
            Integer key = start * 2000 + numWorks;

            if (cache.containsKey(key) ) {
                return cache.get(key);
            }
            int min = Integer.MAX_VALUE;

            int doubleTime = 0;
            if (numWorks == 1) {
                numWorks = 2;
                doubleTime = split;
            }

            int firstScore;
            int restScore;
            while(true)
            {
               firstScore = blocks[start] + doubleTime;
               restScore = minInternal2(blocks, start - 1, numWorks - 1, split) + doubleTime;
               if (min >= Math.max(firstScore, restScore)) {
                   min = Math.max(firstScore, restScore);
               } else {
                   break;
               }


               numWorks *= 2;
               doubleTime += split;
             }

            cache.put(key, min);
            return min;
        }
    }

}
